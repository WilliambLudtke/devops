#!/usr/bin/env python3

import requests
from requests.auth import HTTPBasicAuth
import sys
import json

# Verificar se todos os parâmetros foram passados
if len(sys.argv) != 4:
    print("Uso correto: python seu_script.py <username> <password> <nsx_manager>")
    sys.exit(1)

# Configurações (a partir dos parâmetros de linha de comando)
USERNAME = sys.argv[1]
PASSWORD = sys.argv[2]
NSX_MANAGER = sys.argv[3]

# URL base para o endpoint de transport-nodes
URL_TRANSPORT_NODES = f"{NSX_MANAGER}/api/v1/transport-nodes"

# URL para o endpoint de métricas de rede por interface
URL_NETWORK_METRICS = f"{NSX_MANAGER}/api/v1/transport-nodes/{{node_id}}/network/interfaces/{{interface_id}}/stats?source=cached"

# Desativar warnings de SSL (caso não tenha um certificado válido)
requests.packages.urllib3.disable_warnings()

# Autenticação
auth = HTTPBasicAuth(USERNAME, PASSWORD)

# Cabeçalhos
headers = {
    "Accept": "application/json"
}

# Função para obter as métricas de rede por interface
def get_network_metrics(node_id, interface_id):
    network_url = URL_NETWORK_METRICS.format(node_id=node_id, interface_id=interface_id)
    print(f"Consultando métricas para URL: {network_url}")  # Depuração
    response = requests.get(network_url, auth=auth, headers=headers, verify=False)
    
    if response.status_code == 200:
        network_data = response.json()
        print(f"Resposta de métricas: {json.dumps(network_data, indent=4)}")  # Depuração
        # Pega as métricas de rede
        network_traffic_rate = network_data.get("trafficRate", "N/A")
        network_tx_rate = network_data.get("txRate", "N/A")
        network_rx_rate = network_data.get("rxRate", "N/A")
        network_packets_drop = network_data.get("packetsDrop", "N/A")
        
        return network_traffic_rate, network_tx_rate, network_rx_rate, network_packets_drop
    else:
        print(f"Erro ao obter dados de rede para o node {node_id}, interface {interface_id}: {response.status_code}")
        print(f"Erro: {response.text}")  # Depuração
        return None, None, None, None

# Requisição GET para os nodes
response = requests.get(URL_TRANSPORT_NODES, auth=auth, headers=headers, verify=False)
print(f"Status Code: {response.status_code}")  # Verificar o status da resposta
if response.status_code == 200:
    data = response.json()
    print(f"Resposta dos Nodes: {json.dumps(data, indent=4)}")  # Verificar os dados dos nodes
    
    nodes_info = []
    for node in data.get("results", []):
        node_name = node.get('display_name')
        node_id = node.get('id')
        
        print(f"Node: {node_name} ({node_id})")
        
        # Verificar se o node possui interfaces
        interfaces = node.get('interfaces', [])
        if not interfaces:
            print(f"Nenhuma interface encontrada para o node {node_name}")
        else:
            for interface in interfaces:
                interface_id = interface.get('id')
                print(f"Consultando interface ID: {interface_id}")
                # Obter as métricas de rede para cada interface
                network_traffic_rate, network_tx_rate, network_rx_rate, network_packets_drop = get_network_metrics(node_id, interface_id)
                
                if network_traffic_rate != "N/A":
                    # Adicionar as informações em um dicionário para a saída em JSON
                    node_metrics = {
                        "node_name": node_name,
                        "node_id": node_id,
                        "interface_id": interface_id,
                        "network": {
                            "traffic_rate": network_traffic_rate,
                            "tx_rate": network_tx_rate,
                            "rx_rate": network_rx_rate,
                            "packets_drop": network_packets_drop
                        }
                    }
                    nodes_info.append(node_metrics)
else:
    print(f"Erro: {response.status_code} - {response.text}")

# Exibir a saída em JSON
print(json.dumps(nodes_info, indent=4))
